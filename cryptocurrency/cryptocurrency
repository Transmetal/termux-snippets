#!/usr/bin/env bash
# Author: Hakxcore https://github.com/hakxcore
# colors
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')" 
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')"  BLACK="$(printf '\033[30m')"  
REDBG="$(printf '\033[41m')"  GREENBG="$(printf '\033[42m')"  ORANGEBG="$(printf '\033[43m')"  BLUEBG="$(printf '\033[44m')"  
MAGENTABG="$(printf '\033[45m')"  CYANBG="$(printf '\033[46m')"  WHITEBG="$(printf '\033[47m')"  BLACKBG="$(printf '\033[40m')" 
RESETBG="$(printf '\e[0m')"  BLINK="$(printf '\033[5;31m')"

unset base
unset exchangeTo
old="false"
currentVersion="2.1.2"
unset configuredClient

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
  if  command -v curl &>/dev/null; then
    configuredClient="curl"
  elif command -v wget &>/dev/null; then
    configuredClient="wget"
  elif command -v http &>/dev/null; then
    configuredClient="httpie"
  elif command -v fetch &>/dev/null; then
    configuredClient="fetch"
  else
    echo "Error: This tool requires either curl, wget, httpie or fetch to be installed." >&2
    return 1
  fi
}

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl)  curl -A curl -s "$@" ;;
    wget)  wget -qO- "$@" ;;
    httpie) http -b GET "$@" ;;
    fetch) fetch -q "$@" ;;
  esac
}

## Top 10 cryptocurrencies as base
checkValidCurrency()
{
  if [[ $1 != "BTC" && $1 != "ETH" \
      && $1 != "XRP" && $1 != "LTC" && $1 != "XEM" \
      && $1 != "ETC" && $1 != "DASH" && $1 != "MIOTA" \
      && $1 != "XMR" && $1 != "STRAT" && $1 != "BCH" ]]; then
    echo "1"
  else
    echo "0"
  fi
}

##Determines the target currency
checkTargetCurrency()
{
  if [[ $1 != "AUD" && $1 != "BRL" \
      && $1 != "CAD" && $1 != "CHF" && $1 != "CNY" \
      && $1 != "EUR" && $1 != "GBP" && $1 != "HKD" \
      && $1 != "IDR" && $1 != "INR" && $1 != "JPY" && $1 != "KRW" \
      && $1 != "MXN" && $1 != "RUB" && $1 != "USD" ]]; then
    echo "1"
  else
    echo "0"
  fi
}

## Grabs the base currency from the user and validates it with all the possible currency
## types available on the API and guides user through input (doesnt take in arguments)
getBase()
{
  echo -n "What is the base currency: "
  read -r base
  base=$(echo $base | tr /a-z/ /A-Z/)
  if [[ $(checkValidCurrency $base) == "1"  ]]; then
    unset base
    echo "Invalid base currency"
    getBase
  fi
}

## Checks base currency from the user and validates it with all the possible currency
## types available on the API (requires argument)
checkBase()
{
  base=$1
  base=$(echo $base | tr /a-z/ /A-Z/)
  if [[ $(checkValidCurrency $base) == "1" ]]; then
    unset base
    echo "Invalid base currency"
    exit 1
  fi
}

# Matches the symbol to the appropriate ids regarding the API calling.
transformBase()
{
  case "$base" in
    "ETH") reqId="ethereum" ;;
    "BTC") reqId="bitcoin" ;;
    "XRP") reqId="ripple" ;;
    "LTC") reqId="litecoin" ;;
    "XEM") reqId="nem" ;;
    "ETC") reqId="ethereum-classic" ;;
    "DASH") reqId="dash" ;;
    "MIOTA") reqId="iota" ;;
    "XMR") reqId="monero" ;;
    "STRAT") reqId="stratis" ;;
    "BCH") reqId="bitcoin-cash" ;;
  esac
}

## Grabs the exchange to currency from the user and validates it with all the possible currency
## types available on the API and guides user through input (doesnt take in arguments)
getExchangeTo()
{
  echo -n "What currency to exchange to: "
  read -r exchangeTo
  exchangeTo=$(echo $exchangeTo | tr /a-z/ /A-Z/)
  if [[ $(checkTargetCurrency $exchangeTo) == "1" ]]; then
    echo "Invalid exchange currency"
    unset exchangeTo
    getExchangeTo
  fi
}

## Grabs the exchange to currency from the user and validates it with all the possible currency
## types available on the API (requires arguments)
checkExchangeTo()
{
  exchangeTo=$1
  exchangeTo=$(echo $exchangeTo | tr /a-z/ /A-Z/)
  if [[ $(checkTargetCurrency $exchangeTo) == "1" ]]; then
    echo "Invalid exchange currency"
    unset exchangeTo
    exit 1
  fi
}

## Get the amount that will be exchanged and validate that the user has entered a number (decimals are allowed)
## doesnt take in argument, it guides user through input
getAmount()
{
  echo -n "What is the amount being exchanged: "
  read -r amount
  if [[ ! "$amount" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    echo "The amount has to be a number"
    unset amount
    getAmount
  fi
}

## Get the amount that will be exchanged
## validate that the user has entered a number (decimals are allowed and requires argument)
checkAmount()
{
  amount=$1
  if [[ ! "$amount" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    echo "The amount has to be a number"
    unset amount
    exit 1
  fi
}

##This function Checks for the insternet connectivity
checkInternet()
{
  httpGet github.com > /dev/null 2>&1 || { echo "Error: no active internet connection" >&2; return 1; } # query github with a get request
}

## Grabs the exchange rate and does the math for converting the currency
convertCurrency()
{
  exchangeTo=$(echo "$exchangeTo" | tr '[:upper:]' '[:lower:]')
  exchangeRate=$(curl -s "https://api.coinmarketcap.com/v1/ticker/$reqId/?convert=$exchangeTo" | grep -Eo "\"price_$exchangeTo\": \"[0-9 .]*" | sed s/"\"price_$exchangeTo\": \""//g) > /dev/null
  if ! command -v bc &>/dev/null; then
    oldRate=$exchangeRate
    exchangeRate=$(echo $exchangeRate | grep -Eo "^[0-9]*" )
    amount=$(echo $amount | grep -Eo "^[0-9]*" )
    exchangeAmount=$(( $exchangeRate * $amount ))
    exchangeRate=$oldRate
  else
    exchangeAmount=$( echo "$exchangeRate * $amount" | bc )
  fi
  exchangeTo=$(echo "$exchangeTo" | tr '[:lower:]' '[:upper:]')

  cat <<EOF
=========================
| $base to $exchangeTo
| Rate: $exchangeRate
| $base: $amount
| $exchangeTo: $exchangeAmount
=========================
EOF
}

##Get Graph of a particular crypto
getGraph()
{
  echo "Wanna see real time graph[y/n]: "
  read choice1
  if [[ $choice1 -eq y || $choice1 -eq Y ]]; then
    read "Get graph of (Ex: BTC,ETC,DOGE): " choice
    curl rate.sx/$choice
  elif [[ $choice1 -eq n || $choice1 -eq N ]]; then
      exit 0;
  fi
}

##This function determines the latest version of the termux-snippets if available and installs them
update()
{
  repositoryName="termux-snippets" 
  githubUserName="hakxcore" 
  nameOfInstallFile="install" 
  latestVersion=$(httpGet https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+" ) #always grabs the tag without the v option

  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]]; then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]]; then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == [Yy] ]]; then
        cd ~ || { echo 'Update Failed'; exit 1; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName || { echo "Permissions Error: try running the update again"; exit 1; } ; fi
        echo -n "Downloading latest version of: $repositoryName."
        git clone -q "https://github.com/$githubUserName/$repositoryName" && touch .TSnippetsHiddenFile || { echo "Failure!"; exit 1; } &
        while [ ! -f .TSnippetsHiddenFile ]; do { echo -n "."; sleep 2; };done
        rm -f .TSnippetsHiddenFile
        echo "Success!"
        cd $repositoryName || { echo 'Update Failed'; exit 1; }
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."
        ./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName || { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory again"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi
}

##Usage and Help
usage()
{
  cat <<EOF
CryptoCurrency

Description: A realtime cryptocurrency converter.
With no flags it will pull down the latest stats of the top 10 cryptos also will extract real time graph of one crypto.

Usage: cryptocurrency or cryptocurrency [flag] or cryptocurrency [flag] [arg]
   -o Utilize the old functionality of the tool
   -f Fiat currency for conversions
   -u Update Termux-snippets Tools
   -h Show the help
   -v Get the tool version

Examples:
   cryptocurrency
   cryptocurrency -o #for all the functionalities of tool 
EOF
}

##Options(fags)
while getopts "c:of:uvh" opt; do
  case "$opt" in
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    c)
        currency=$OPTARG
        ;;
    h)  usage
        exit 0
        ;;
    f)
        fiat=$OPTARG
        ;;
    o)
        old="true"
        ;;
    v)  echo "Version $currentVersion"
        exit 0
        ;;
    u)  checkInternet || exit 1 # check if we have a valid internet connection if this isnt true the rest of the script will not work so stop here
        update
        exit 0
        ;;
    :)  echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
  esac
done

if $old;then
getConfiguredClient || exit 1
getBase # get base currency
getExchangeTo # get exchange to currency
getAmount # get the amount to be converted
transformBase
convertCurrency # grab the exhange rate and perform the conversion
getGraph
exit 0
fi


##Driver
if [[ $1 == "update" ]]; then
  getConfiguredClient || exit 1
  checkInternet || exit 1 # check if we have a valid internet connection if tht will not work so stop here
  update
  exit 0
elif [[ $1 == "help" ]]; then
  usage
  exit 0
fi

getConfiguredClient || exit 1
checkInternet || exit 1
link="rate.sx"
if [[ $fiat =~ [a-zA-Z] ]]; then
  link="$fiat.$link"
fi

if [[ $currency =~ [a-zA-Z] ]]; then
  link="$link/$currency"
fi
clear
echo "$WHITEBG                                                                                                         $RESETBG"
echo "$WHITEBG                                                                                                         $RESETBG"
httpGet $link
echo "$WHITEBG                                                                                                         $RESETBG"
echo "$WHITEBG                                                                                                         $RESETBG"
echo ""
echo ""
echo ""
echo ""
echo ""
echo ""
echo ""
read -p "$BLUE>$RESETBG Choose any one coin[Ex: BTC,ETH,DOGE] " coin
echo "$WHITEBG                                                                                                        $RESETBG"
echo "$WHITEBG                                                                                                        $RESETBG"
curl rate.sx/$coin
echo "$WHITEBG                                                                                                        $RESETBG"
echo "$WHITEBG                                                                                                        $RESETBG"
