#!/usr/bin/env bash
# Author: Hakxcore https://github.com/hakxcore
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')" 
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')"  BLACK="$(printf '\033[30m')"  
REDBG="$(printf '\033[41m')"  GREENBG="$(printf '\033[42m')"  ORANGEBG="$(printf '\033[43m')"  BLUEBG="$(printf '\033[44m')"  
MAGENTABG="$(printf '\033[45m')"  CYANBG="$(printf '\033[46m')"  WHITEBG="$(printf '\033[47m')"  BLACKBG="$(printf '\033[40m')" 
RESETBG="$(printf '\e[0m')"  BLINK="$(printf '\033[5;31m')"

currentVersion="2.1.2"
configuredClient=""
configuredPython=""

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
  if  command -v curl &>/dev/null; then
    configuredClient="curl"
  elif command -v wget &>/dev/null; then
    configuredClient="wget"
  elif command -v http &>/dev/null; then
    configuredClient="httpie"
  elif command -v fetch &>/dev/null; then
    configuredClient="fetch"
  else
    echo "Error: This tool requires either curl, wget, httpie or fetch to be installed." >&2
    return 1
  fi
}

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl)  curl -A curl -s "$@" ;;
    wget)  wget -qO- "$@" ;;
    httpie) http -b GET "$@" ;;
    fetch) fetch -q "$@" ;;
  esac
}

##This function Checks for the insternet connectivity
checkInternet()
{
  httpGet github.com > /dev/null 2>&1 || { echo "Error: no active internet connection" >&2; return 1; } # query github with a get request
}

##This function determines the latest version of the termux-snippets if available and installs them
update()
{
  repositoryName="termux-snippets" 
  githubUserName="hakxcore" 
  nameOfInstallFile="install" 
  latestVersion=$(httpGet https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+" ) #always grabs the tag without the v option

  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]]; then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]]; then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == [Yy] ]]; then
        cd ~ || { echo 'Update Failed'; exit 1; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName || { echo "Permissions Error: try running the update agian"; exit 1; } ; fi
        echo -n "Downloading latest version of: $repositoryName."
        git clone -q "https://github.com/$githubUserName/$repositoryName" && touch .TSnippetsHiddenFile || { echo "Failure!"; exit 1; } &
        while [ ! -f .TSnippetsHiddenFile ]; do { echo -n "."; sleep 2; };done
        rm -f .TSnippetsHiddenFile
        echo "Success!"
        cd $repositoryName || { echo 'Update Failed'; exit 1; }
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."
	./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName || { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory again"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi
}

##Usage and Help
usage()
{
  cat <<EOF
Shorturl

Description: Shorten urls and unmask shortended urls.

Usage: shorturl [flag] [URL] or short [flag]
  -s  Shorten the URL
  -e  Expand a shortened URL
  -u  Update Termux-snippets Tools
  -h  Show the help
  -v  Get the tool version

Example:
   Input: shorturl -s https://possiblemaliciouswebsiteornot.com
   Output: https://tinyurl.com/jkkj
   Input:  shorturl -e tinyurl.com/jhkj
   Output: http://possiblemaliciouswebsiteornot.com
EOF
}

##Expand the url
expandURL()
{
  testURL=$( echo $1 | cut -c1-8 )
  if [[ $testURL != "https://" ]]; then
    testURL=$( echo $1 | cut -c1-7 )
    if [[ $testURL != "http://" ]]; then
      url="http://$1"
    else
      url=$1
    fi
  else
    url=$1
  fi
  response=$(httpGet https://unshorten.me/s/$url)
  errorCheck=$(echo $response)
  if [[ $errorCheck == "Invalid Short URL" ]]; then
  echo "Error: 404 could not find the website"
  return 1
fi
  returnedURL=$(echo $response)
}

##Shorten the link
shortenURL()
{
newURL=$1
if [[ $(echo $1 | grep -Eo "^[h]ttp[s]?://") == "" ]]; then newURL="http://"$1; fi
response1=$(httpGet http://tinyurl.com/api-create.php?url=$newURL)
shortenedURL1=$(echo $response1)
response2=$(httpGet http://curl -F shorten=$newURL https://ttm.sh)
shortenedURL2=$(echo $response2)
response3=$(httpGet http://curl -F shorten=$newURL https://0x0.st)
shortenedURL3=$(echo $response3)
}

##Print the extended link
printExpandedResults()
{
  cat <<EOF
 --------------------------------------------------------------------
|  Short URL:    $inputURL
|  $BLUE>$RESETBG Expanded URL: $GREEN$returnedURL$RESETBG
 --------------------------------------------------------------------
EOF
}

##Print the shortened link
printShortenedResults()
{
  cat <<EOF
 --------------------------------------------------------------------
|  Original URL:  $newURL
| 
|  $BLUE>$RESETBG Shortened URL 1: $GREEN$shortenedURL1$RESETBG
|  $BLUE>$RESETBG Shortened URL 2: $GREEN$shortenedURL2$RESETBG
|  $BLUE>$RESETBG Shortened URL 3: $GREEN$shortenedURL3$RESETBG
 --------------------------------------------------------------------
EOF
}

getConfiguredClient || exit 1

##Option(flags)
while getopts "e:s:uvh" opt; do
  case "$opt" in
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    e)
        expand="true"
        inputURL=$OPTARG
        ;;
    s)
        shorten="true"
        inputURL=$OPTARG
        ;;
    h)  usage
        exit 0
        ;;
    v)  echo "Version $currentVersion"
        exit 0
        ;;
    u)  checkInternet || exit 1
        update
        exit 0
        ;;
    :)  echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
  esac
done

if  [[ $expand == "true" && $shorten == "true" ]];then
  echo "Error: the -e and the -s options are mutually exclusive" >&2
  exit 1
fi

##Driver
if [[ $# == 0 ]]; then
  usage
  exit 0
elif [[ $# == "1" ]]; then
  if [[ $1 == "update" ]]; then
    checkInternet || exit 1
    update
  elif [[ $1 == "help" ]]; then
    usage

  else
    usage
    exit 1
  fi
elif [[ $expand == "true" ]];then
  checkInternet || exit 1
  expandURL "$inputURL" || exit 1
  printExpandedResults
elif [[ $shorten == "true" ]];then
  if [[ $configuredClient != "curl" ]];then
    echo "Error: to shorten URLS you must have curl installed"
  fi
  checkInternet || exit 1
  shortenURL "$inputURL"
  printShortenedResults
else
  echo "Error: short only accepts one argument"
  exit 1
fi

