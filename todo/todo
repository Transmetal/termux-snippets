#!/usr/bin/env bash
# Inspired by: Alexander Epstein https://github.com/alexanderepstein
# Author: Hakxcore https://github.com/hakxcore
# colors
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')" 
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')"  BLACK="$(printf '\033[30m')"  
REDBG="$(printf '\033[41m')"  GREENBG="$(printf '\033[42m')"  ORANGEBG="$(printf '\033[43m')"  BLUEBG="$(printf '\033[44m')"  
MAGENTABG="$(printf '\033[45m')"  CYANBG="$(printf '\033[46m')"  WHITEBG="$(printf '\033[47m')"  BLACKBG="$(printf '\033[40m')" 
RESETBG="$(printf '\e[0m')"  BLINK="$(printf '\033[5;31m')"

flag=""
currentVersion="2.1.2"
configuredClient=""

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
  if  command -v curl &>/dev/null; then
    configuredClient="curl"
  elif command -v wget &>/dev/null; then
    configuredClient="wget"
  elif command -v http &>/dev/null; then
    configuredClient="httpie"
  elif command -v fetch &>/dev/null; then
    configuredClient="fetch"
  else
    echo "Error: This tool requires either curl, wget, httpie or fetch to be installed." >&2
    return 1
  fi
}

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl)  curl -A curl -s "$@" ;;
    wget)  wget -qO- "$@" ;;
    httpie) http -b GET "$@" ;;
    fetch) fetch -q "$@" ;;
  esac
}

##This function determines the latest version of the termux-snippets if available and installs them
update()
{
  repositoryName="termux-snippets" 
  githubUserName="hakxcore" 
  nameOfInstallFile="install" 
  latestVersion=$(curl -s https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+" ) #always grabs the tag without the v option

  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]]; then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]]; then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == [Yy] ]]; then
        cd ~ || { echo 'Update Failed'; exit 1; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName || { echo "Permissions Error: try running the update again"; exit 1; } ; fi
        echo -n "Downloading latest version of: $repositoryName."
        git clone -q "https://github.com/$githubUserName/$repositoryName" && touch .TSnippetsHiddenFile || { echo "Failure!"; exit 1; } &
        while [ ! -f .TSnippetsHiddenFile ]; do { echo -n "."; sleep 2; };done
        rm -f .TSnippetsHiddenFile
        echo "Success!"
        cd $repositoryName || { echo 'Update Failed'; exit 1; }
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."
      
        ./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName || { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory again"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi
}

##Add tasks in todo list
addTask()
{
  if [ ! -f ~/.todo/list.txt ]; then
    if [ ! -d ~/.todo ]; then mkdir ~/.todo; fi
    touch ~/.todo/list.txt
  fi
  echo "$1       ;      $BLUE$(date)$RESETBG" >> ~/.todo/list.txt
}

##This function Checks for the insternet connectivity
checkInternet()
{
  httpGet github.com > /dev/null 2>&1 || { echo "Error: no active internet connection" >&2; return 1; } # query github with a get request
}

##Remove tasks from the todo list
removeTask()
{
  ## Check for valid task numbers (valid characters)
  if [ -f ~/.todo/temp.txt ];then rm -f ~/.todo/temp.txt;fi
  touch ~/.todo/temp.txt
  for taskToRemove in "$@";do
    oldTaskNumber=$taskToRemove
    taskNumber=$( echo $taskToRemove | grep -Eo "[0-9]*" )
    if [[ $taskNumber == "" || $oldTaskNumber != $taskNumber ]]; then echo "Error: $oldTaskNumber is not a valid task number!" && return 1; fi
  done
  count="0"
  IFS=$'\n'       # make newlines the only separator

  ## Removing the task (only don't add to temp if we should remove it)
  for task in $(cat ~/.todo/list.txt); do
    removeIt="false"
    for taskToRemove in "$@";do
      if [[ $(($count + 1)) == "$taskToRemove" ]]; then
      removeIt="true"
      break
      fi
    done
    if ! $removeIt ;then echo "$task" >> ~/.todo/temp.txt;fi
    count=$(( $count + 1 ))
  done
  rm -f ~/.todo/list.txt
  cp  ~/.todo/temp.txt ~/.todo/list.txt
  rm -f ~/.todo/temp.txt

  ##Checking if the task exists
  for taskToRemove in "$@" ;do
    if [ $count -lt $taskToRemove ]; then
      echo ""$BLUE"Error:$RESETBG task number $taskToRemove does not exist!"
    else
      echo ""$BLUE"Sucessfully removed task number $taskToRemove$RESETBG"
    fi
  done
}

##Get all tasks from todo list
getTasks()
{
  if [ -f ~/.todo/list.txt ]; then
    checkEmpty=$(cat ~/.todo/list.txt)
    if [[ $checkEmpty == "" ]]; then
      echo "No tasks found"
    else
      count="1"
      IFS=$'\n'       # make newlines the only separator
      for task in $(cat ~/.todo/list.txt); do
        tempTask=$count
        if [ $count -lt 10 ]; then tempTask="0$count"; fi
        echo "$BLUE[$RESETBG$tempTask$BLUE]$RESETBG     $task"  >> ~/.todo/getTemp.txt
        count=$(( $count + 1 ))
      done
      cat ~/.todo/getTemp.txt | column -t -s ";"
      rm -f ~/.todo/getTemp.txt
    fi
  else
    echo "No tasks found"
  fi
}

##Usage and Help
usage()
{
  cat <<EOF
Todo

Description: A simplistic commandline todo list.

Usage: todo [flags] or todo [flags] [arguments]
  -c  Clear all the current tasks
      Can also use clear instead of -c
  -r  Remove the following task numbers seprated by spaces
      Can also use remove instead of -r
  -g  Get the current tasks
      Can also use list instead of -g
  -a  Add the following task
      Can also use add instead of -a
  -u  Update Termux-snippets Tools
  -h  Show the help
  -v  Get the tool version

Examples:
   todo -a My very first task
   todo remove 2
   todo -r 1 3
   todo add Another Task
   todo list
   todo -g
   todo -c
   todo clear
EOF
}

##Clear all tasks from your todo list
clearAllTasks()
{
  rm -f ~/.todo/list.txt || return 1
  touch ~/.todo/list.txt || return 1
  echo "Tasks cleared."
}

##Options(flags)
while getopts "cr:a:guvh" opt; do
  case "$opt" in
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    c)  if [[ $flag == "" ]]; then
          flag="clear"
        else
          echo ""$BLUE"Error:$RSETBG all flags are mutually exclusive"
          exit 1
        fi
        ;;
    h)  usage
        exit 0
        ;;
    v)  echo ""$BLUE"Version$RESETBG $currentVersion"
        exit 0
        ;;
    g)  if [[ $flag == "" ]]; then
          flag="get"
        else
          echo ""$BLUE"Error:$RESETBG all flags are mutually exclusive"
          exit 1
        fi
        ;;
    r)  if [[ $flag == "" ]]; then
          flag="remove"
        else
          echo ""$BLUE"Error:$RESTBG all flags are mutually exclusive"
          exit 1
        fi
        ;;
    a)  if [[ $flag == "" ]]; then
          flag="add"
        else
          echo ""$BLUE"Error:$RESTBG all flags are mutually exclusive"
          exit 1
        fi
        ;;
    u)  getConfiguredClient || exit 1
        checkInternet || exit 1
        update
        exit 0
        ;;
    :)  echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
  esac
done

##Driver
if [[ $# == "0" ]]; then
  usage
elif [[ $# == "1" ]]; then
  if [[ $1 == "clear" ]]; then
    clearAllTasks || exit 1
  elif [[ $1 == "update" ]]; then
    getConfiguredClient || exit 1
    checkInternet || exit 1
    update || exit 1
    exit 0
  elif [[ $1 == "help" ]]; then
    usage
    exit 0
  elif [[ $flag == "clear" || $1 == "clear" ]]; then clearAllTasks || exit 1
  elif [[ $flag == "get" || $1 == "list" || $1 == "get" ]]; then getTasks || exit 1
  else { echo "Error: the argument $1 is not valid"; exit 1; }; fi
else
  if [[ $flag == "add" || $1 == "add" ]]; then addTask "${*:2}" && getTasks || exit 1
  elif [[ $flag == "remove" || $1 == "remove" ]]; then removeTask ${*:2} && getTasks || exit 1
  else { usage; exit 1; }; fi
fi

